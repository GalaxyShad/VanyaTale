<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprController</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>message = "Проверка текста. Раз... /gдва... восемь /yсемь четыре /bауе /rеуа хуета ла ла ла";

maxWidth = 520;

fontColor = c_white;
font = fntMain;

snd = snd_text_battle;

pos = 0;
spd = 1;

interval = 32;
addSpacing = 0;

canSkip = false;
isDone = false;

alarm[0] = spd;




</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (pos &gt;= posMax) {
   isDone = true;
   exit;
}

if (string_char_at(message, pos) == ' ' || string_char_at(message, pos) == '*') {
   pos++;
}

if (string_char_at(message, pos) == '/') {
   pos+=2;
}

//if (messsage[pos] == )

audio_play_sound(snd, 0, false);
pos++;
   
alarm[0] = spd;
if (string_char_at(message, pos) == ',' || string_char_at(message, pos) == '.' || string_char_at(message, pos) == '?' || string_char_at(message, pos) == '!')
   alarm[0] = 15;



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>posMax = string_length(message);

if (canSkip &amp;&amp; global.keyBackPressed) {
   pos = posMax;
   isDone = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_set_colour(fontColor);
draw_set_font(font);
//draw_text(0, 0, "ASLDlsad");

var text_x = 0;
var text_y = 0;
var is_p = false;
var color = fontColor;


for (var i = 1; i &lt; pos+1; i++) {
    if (string_char_at(message, i) == '/') {
       switch (string_char_at(message, i+1)) {
              case 'y': color = c_yellow; break;
              case 'g': color = c_lime; break;
              case 'b': color = c_aqua; break;
              case 'r': color = c_red; break;
       }
       i += 2;
    }
    
    if (string_char_at(message, i) == ' ') {
       color = fontColor;
    }

    if ( (text_x &gt; maxWidth - 128 &amp;&amp; string_char_at(message, i) == ' ') || (string_char_at(message, i) == '#')) {
       text_y += interval;
       text_x = 0; 
       if (is_p) {
          text_x += string_width("* ");
       }
    
      continue;
    }
    
     if (string_char_at(message, i) == '*') {
       text_y += interval * (i != 1);
       text_x = 0; 
       is_p = true;
    }
    
    
       
    draw_text_colour(x + text_x, y-7 + text_y, string_char_at(message, i), color, color, color, color, 1);
    //draw_text(x + text_x, y-7 + text_y, string_char_at(message, i));
    
    text_x += string_width(string_char_at(message, i)) + addSpacing;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
